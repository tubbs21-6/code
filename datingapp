import React, { useState } from "react";
import { Users } from "lucide-react";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";

// Types
interface Profile {
  id: string;
  name: string;
  age: number;
  bio: string;
  interests: string[];
  imageUrl: string;
  status: "Available" | "On Date" | "Offline";
}

interface UserGroup {
  id: number;
  area: string;
  count: number;
}

interface ProfileCardProps extends Omit<Profile, 'id'> {
  onBid: () => void;
}

// ProfileCard Component
const ProfileCard: React.FC<ProfileCardProps> = ({
  name,
  age,
  bio,
  interests,
  imageUrl,
  status,
  onBid
}) => {
  const statusColors = {
    Available: "text-green-500",
    "On Date": "text-yellow-500",
    Offline: "text-gray-500"
  };

  return (
    <div className="bg-white rounded-xl shadow-lg overflow-hidden transition-all hover:shadow-xl">
      <div className="aspect-w-3 aspect-h-4">
        <img 
          src={imageUrl} 
          alt={name} 
          className="w-full h-full object-cover"
        />
      </div>
      <div className="p-4">
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-xl font-semibold">{name}, {age}</h3>
          <span className={`${statusColors[status]} text-sm font-medium`}>
            {status}
          </span>
        </div>
        <p className="text-gray-600 mb-3">{bio}</p>
        <div className="flex flex-wrap gap-2 mb-4">
          {interests.map((interest, index) => (
            <span 
              key={index}
              className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded-full"
            >
              {interest}
            </span>
          ))}
        </div>
        <button
          onClick={onBid}
          className="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-2 rounded-lg hover:opacity-90 transition-opacity"
        >
          Place Bid
        </button>
      </div>
    </div>
  );
};

// ProfileGrid Component
const ProfileGrid: React.FC<{ profiles: Profile[]; onBid: (profileId: string) => void }> = ({ 
  profiles, 
  onBid 
}) => {
  const [page, setPage] = useState(1);
  const profilesPerPage = 6;
  const totalPages = Math.ceil(profiles.length / profilesPerPage);
  const startIndex = (page - 1) * profilesPerPage;
  const displayedProfiles = profiles.slice(startIndex, startIndex + profilesPerPage);

  return (
    <div className="w-full max-w-7xl mx-auto px-4 py-8">
      <Carousel opts={{ align: "start", loop: true }} className="w-full">
        <CarouselContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {displayedProfiles.map((profile) => (
            <CarouselItem 
              key={profile.id} 
              className="basis-full md:basis-1/2 lg:basis-1/3"
            >
              <ProfileCard
                {...profile}
                onBid={() => onBid(profile.id)}
              />
            </CarouselItem>
          ))}
        </CarouselContent>
        <div className="flex justify-center mt-8 gap-4">
          <CarouselPrevious />
          <CarouselNext />
        </div>
      </Carousel>
      
      <div className="mt-8">
        <Pagination>
          <PaginationContent>
            <PaginationItem>
              <PaginationPrevious
                onClick={() => setPage((p) => Math.max(1, p - 1))}
                disabled={page === 1}
              />
            </PaginationItem>
            {Array.from({ length: totalPages }).map((_, i) => (
              <PaginationItem key={i}>
                <PaginationLink
                  onClick={() => setPage(i + 1)}
                  isActive={i + 1 === page}
                >
                  {i + 1}
                </PaginationLink>
              </PaginationItem>
            ))}
            <PaginationItem>
              <PaginationNext
                onClick={() => setPage((p) => Math.min(totalPages, p + 1))}
                disabled={page === totalPages}
              />
            </PaginationItem>
          </PaginationContent>
        </Pagination>
      </div>
    </div>
  );
};

// MainView Component
const MainView = () => {
  const userGroups: UserGroup[] = [
    { id: 1, count: 3, area: "Downtown" },
    { id: 2, count: 5, area: "Uptown" },
    { id: 3, count: 4, area: "Midtown" }
  ];

  const profiles: Profile[] = [
    {
      id: "1",
      name: "John Doe",
      age: 28,
      bio: "Loves hiking and outdoor adventures.",
      interests: ["Hiking", "Traveling", "Photography"],
      imageUrl: "/api/placeholder/400/500",
      status: "Available"
    },
    {
      id: "2",
      name: "Jane Smith",
      age: 25,
      bio: "Avid reader and coffee enthusiast.",
      interests: ["Reading", "Coffee", "Yoga"],
      imageUrl: "/api/placeholder/400/500",
      status: "On Date"
    }
  ];

  const handleBid = (profileId: string) => {
    console.log(`Bid placed for profile ID: ${profileId}`);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-pink-50 py-12 px-4">
      <div className="container mx-auto">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold text-center mb-12 text-primary">
            DateBid
          </h1>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {userGroups.map((group) => (
              <div
                key={group.id}
                className="flex flex-col items-center p-6 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer"
              >
                <Users className="w-20 h-20 text-primary mb-4 hover:scale-110 transition-transform" />
                <h2 className="text-xl font-semibold mb-2">{group.area}</h2>
                <p className="text-gray-600">{group.count} Active Users</p>
              </div>
            ))}
          </div>

          <div className="mt-12">
            <ProfileGrid profiles={profiles} onBid={handleBid} />
          </div>
        </div>
      </div>
    </div>
  );
};

export default MainView;
