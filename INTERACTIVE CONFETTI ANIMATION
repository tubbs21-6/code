<!DOCTYPE html>
<html>
<head>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      min-height: 100vh;
      background: linear-gradient(135deg, #1a1a1a, #2d3436);
      cursor: pointer;
      font-family: system-ui, -apple-system, sans-serif;
    }
    
    .confetti {
      position: absolute;
      border-radius: 50%;
      animation: confettiFloat var(--duration, 3s) ease-in-out forwards;
      filter: blur(1px);
      mix-blend-mode: screen;
      pointer-events: none;
    }
    
    .particle {
      position: absolute;
      width: 16px;
      height: 16px;
      background: radial-gradient(circle at 30% 30%, var(--color, #fbbf24), transparent);
      border-radius: 50%;
      animation: particleFloat var(--duration, 10s) linear infinite;
      filter: blur(1px) brightness(1.2);
      mix-blend-mode: screen;
      pointer-events: none;
    }
    
    .sparkle {
      position: absolute;
      width: 4px;
      height: 4px;
      background: white;
      border-radius: 50%;
      animation: sparkleFloat var(--duration, 2s) ease-out infinite;
      filter: blur(0.5px);
      mix-blend-mode: screen;
      pointer-events: none;
    }
    
    .trail {
      position: absolute;
      pointer-events: none;
      animation: trailFade 1s ease-out forwards;
    }
    
    .controls {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 10px;
      background: rgba(255, 255, 255, 0.1);
      padding: 10px 20px;
      border-radius: 20px;
      backdrop-filter: blur(10px);
    }
    
    .controls button {
      background: rgba(255, 255, 255, 0.2);
      border: none;
      padding: 8px 16px;
      color: white;
      border-radius: 15px;
      cursor: pointer;
      transition: background 0.3s;
    }
    
    .controls button:hover {
      background: rgba(255, 255, 255, 0.3);
    }
    
    .controls button.active {
      background: rgba(255, 255, 255, 0.4);
    }
    
    .message {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: white;
      font-size: 24px;
      text-align: center;
      opacity: 0.8;
      pointer-events: none;
      text-shadow: 0 0 10px rgba(255,255,255,0.5);
    }
    
    @keyframes confettiFloat {
      0% {
        transform: scale(0.5) translate(0, 0) rotate(0deg);
        opacity: 1;
      }
      50% {
        transform: scale(1.5) translate(var(--tx-mid), var(--ty-mid)) rotate(var(--rotation));
        opacity: 0.8;
      }
      100% {
        transform: scale(0.5) translate(var(--tx-end), var(--ty-end)) rotate(calc(var(--rotation) * 2));
        opacity: 0;
      }
    }
    
    @keyframes particleFloat {
      0% {
        transform: scale(0) translate(0, 0);
        opacity: 0.1;
      }
      10% {
        transform: scale(1) translate(var(--tx-small), -100px);
        opacity: 1;
      }
      90% {
        transform: scale(0.8) translate(calc(var(--tx-small) * -1), -400px);
        opacity: 0.8;
      }
      100% {
        transform: scale(0) translate(0, -500px);
        opacity: 0;
      }
    }
    
    @keyframes sparkleFloat {
      0% {
        transform: scale(0) translate(0, 0);
        opacity: 1;
      }
      100% {
        transform: scale(1) translate(var(--tx), var(--ty));
        opacity: 0;
      }
    }
    
    @keyframes trailFade {
      0% {
        transform: scale(1);
        opacity: 0.8;
      }
      100% {
        transform: scale(2);
        opacity: 0;
      }
    }
  </style>
</head>
<body>
  <div class="message">Click or move mouse for effects!</div>
  <div class="controls">
    <button id="toggleParticles">Toggle Particles</button>
    <button id="toggleTrails">Toggle Trails</button>
    <button id="toggleConfetti">Toggle Auto Confetti</button>
  </div>
  
  <script>
    const CANDY_COLORS = [
      '#ff6b6b', // red
      '#4ecdc4', // teal
      '#45b7d1', // blue
      '#96ceb4', // green
      '#ffbe0b', // yellow
      '#ff9ff3', // pink
      '#ffd32a', // gold
      '#0be881'  // lime
    ];
    
    const state = {
      mouseX: 0,
      mouseY: 0,
      isClicking: false,
      showParticles: true,
      showTrails: true,
      showAutoConfetti: true,
      particleCount: 0,
      maxParticles: 30
    };
    
    function getRandomColor() {
      return CANDY_COLORS[Math.floor(Math.random() * CANDY_COLORS.length)];
    }
    
    function createConfetti(x, y, burst = false) {
      const confetti = document.createElement('div');
      const color = getRandomColor();
      const size = Math.random() * 30 + 10;
      const duration = Math.random() * 2 + 2;
      
      confetti.className = 'confetti';
      confetti.style.width = size + 'px';
      confetti.style.height = size + 'px';
      confetti.style.background = `radial-gradient(circle, ${color}, ${color}00)`;
      confetti.style.setProperty('--duration', duration + 's');
      
      const angle = burst ? Math.random() * Math.PI * 2 : Math.PI * 1.5 + (Math.random() - 0.5);
      const velocity = burst ? Math.random() * 200 + 200 : Math.random() * 100 + 100;
      const tx = Math.cos(angle) * velocity;
      const ty = Math.sin(angle) * velocity;
      
      confetti.style.setProperty('--tx-mid', tx * 0.5 + 'px');
      confetti.style.setProperty('--ty-mid', ty * 0.5 + 'px');
      confetti.style.setProperty('--tx-end', tx + 'px');
      confetti.style.setProperty('--ty-end', ty + 'px');
      confetti.style.setProperty('--rotation', Math.random() * 720 - 360 + 'deg');
      
      confetti.style.left = x + 'px';
      confetti.style.top = y + 'px';
      
      document.body.appendChild(confetti);
      confetti.addEventListener('animationend', () => confetti.remove());
    }
    
    function createParticle() {
      if (!state.showParticles || state.particleCount >= state.maxParticles) return;
      
      const particle = document.createElement('div');
      const color = getRandomColor();
      const duration = Math.random() * 5 + 8;
      
      particle.className = 'particle';
      particle.style.setProperty('--color', color);
      particle.style.setProperty('--duration', duration + 's');
      particle.style.setProperty('--tx-small', (Math.random() * 200 - 100) + 'px');
      
      particle.style.left = Math.random() * window.innerWidth + 'px';
      particle.style.top = window.innerHeight + 20 + 'px';
      
      document.body.appendChild(particle);
      state.particleCount++;
      
      particle.addEventListener('animationend', () => {
        particle.remove();
        state.particleCount--;
        if (state.showParticles) {
          createParticle();
        }
      });
    }
    
    function createSparkle(x, y) {
      const sparkle = document.createElement('div');
      sparkle.className = 'sparkle';
      sparkle.style.left = x + 'px';
      sparkle.style.top = y + 'px';
      
      const angle = Math.random() * Math.PI * 2;
      const distance = Math.random() * 100 + 50;
      sparkle.style.setProperty('--tx', Math.cos(angle) * distance + 'px');
      sparkle.style.setProperty('--ty', Math.sin(angle) * distance + 'px');
      sparkle.style.setProperty('--duration', Math.random() + 1 + 's');
      
      document.body.appendChild(sparkle);
      sparkle.addEventListener('animationend', () => sparkle.remove());
    }
    
    function createTrail(x, y) {
      if (!state.showTrails) return;
      
      const trail = document.createElement('div');
      trail.className = 'trail';
      trail.style.left = x + 'px';
      trail.style.top = y + 'px';
      trail.style.width = '10px';
      trail.style.height = '10px';
      trail.style.background = `radial-gradient(circle, ${getRandomColor()}, transparent)`;
      trail.style.borderRadius = '50%';
      
      document.body.appendChild(trail);
      trail.addEventListener('animationend', () => trail.remove());
    }
    
    // Initialize particles
    for (let i = 0; i < state.maxParticles; i++) {
      setTimeout(createParticle, Math.random() * 5000);
    }
    
    // Mouse move effects
    document.addEventListener('mousemove', (e) => {
      state.mouseX = e.clientX;
      state.mouseY = e.clientY;
      
      if (Math.random() < 0.2) {
        createTrail(state.mouseX, state.mouseY);
      }
      
      if (state.isClicking) {
        createConfetti(state.mouseX, state.mouseY);
        if (Math.random() < 0.3) {
          createSparkle(state.mouseX, state.mouseY);
        }
      }
    });
    
    // Click effects
    document.addEventListener('mousedown', (e) => {
      state.isClicking = true;
      for (let i = 0; i < 20; i++) {
        setTimeout(() => {
          createConfetti(e.clientX, e.clientY, true);
          createSparkle(e.clientX, e.clientY);
        }, i * 50);
      }
    });
    
    document.addEventListener('mouseup', () => {
      state.isClicking = false;
    });
    
    // Automatic effects
    const autoConfettiInterval = setInterval(() => {
      if (state.showAutoConfetti && Math.random() < 0.3) {
        createConfetti(
          Math.random() * window.innerWidth,
          Math.random() * window.innerHeight
        );
      }
    }, 500);
    
    // Controls
    document.getElementById('toggleParticles').addEventListener('click', (e) => {
      state.showParticles = !state.showParticles;
      e.target.classList.toggle('active');
      if (state.showParticles) {
        for (let i = 0; i < state.maxParticles; i++) {
          setTimeout(createParticle, Math.random() * 1000);
        }
      }
    });
    
    document.getElementById('toggleTrails').addEventListener('click', (e) => {
      state.showTrails = !state.showTrails;
      e.target.classList.toggle('active');
    });
    
    document.getElementById('toggleConfetti').addEventListener('click', (e) => {
      state.showAutoConfetti = !state.showAutoConfetti;
      e.target.classList.toggle('active');
    });
    
    // Remove message after 3 seconds
    setTimeout(() => {
      const message = document.querySelector('.message');
      message.style.opacity = '0';
      message.style.transition = 'opacity 1s';
    }, 3000);
  </script>
</body>
</html>
